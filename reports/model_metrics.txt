for full model, see: notebooks/4-Modeling.ipynb

--------------------
Final Model Features
--------------------
pipe_10 = make_pipeline(
    MinMaxScaler(), 
    PCA(random_state=42),
    RandomForestRegressor(random_state=42) )
pipe_10.get_params().keys()

---------------------
Hyperparameter Tuning
---------------------
param_grid_10 = {'pca__n_components': np.arange(1,10),
                'randomforestregressor__n_estimators': [int(n) for n in np.logspace(start=1, stop=2, num=5)],
                'randomforestregressor__max_depth': [2, 5, 10, 20]}
model_10 = GridSearchCV(pipe_10, param_grid_10, cv=5, n_jobs=-1)
model_10.fit(X_train, y_train)

GridSearchCV(cv=5,
             estimator=Pipeline(steps=[('minmaxscaler', MinMaxScaler()),
                                       ('pca', PCA(random_state=42)),
                                       ('randomforestregressor',
                                        RandomForestRegressor(random_state=42))]),
             n_jobs=-1,
             param_grid={'pca__n_components': array([1, 2, 3, 4, 5, 6, 7, 8, 9]),
                         'randomforestregressor__max_depth': [2, 5, 10, 20],
                         'randomforestregressor__n_estimators': [10, 17, 31, 56,
                                                                 100]})

print("Model 10: Best Parameters: " + str(model_10.best_params_))

Model 10: Best Parameters: {'pca__n_components': 7, 'randomforestregressor__max_depth': 10, 'randomforestregressor__n_estimators': 31}

----------
Parameters
----------
model_10.best_estimator_
Pipeline(steps=[('minmaxscaler', MinMaxScaler()),
                ('pca', PCA(n_components=7, random_state=42)),
                ('randomforestregressor',
                 RandomForestRegressor(max_depth=10, n_estimators=31,
                                       random_state=42))])

pipe_10.named_steps
{'minmaxscaler': MinMaxScaler(),
 'pca': PCA(random_state=42),
 'randomforestregressor': RandomForestRegressor(random_state=42)}

pipe_10.named_steps['minmaxscaler'].get_params(deep=True)
{'copy': True, 'feature_range': (0, 1)}

pipe_10.named_steps['pca'].get_params(deep=True)
{'copy': True,
 'iterated_power': 'auto',
 'n_components': None,
 'random_state': 42,
 'svd_solver': 'auto',
 'tol': 0.0,
 'whiten': False}

pipe_10.named_steps['randomforestregressor'].get_params(deep=True)
{'bootstrap': True,
 'ccp_alpha': 0.0,
 'criterion': 'mse',
 'max_depth': None,
 'max_features': 'auto',
 'max_leaf_nodes': None,
 'max_samples': None,
 'min_impurity_decrease': 0.0,
 'min_impurity_split': None,
 'min_samples_leaf': 1,
 'min_samples_split': 2,
 'min_weight_fraction_leaf': 0.0,
 'n_estimators': 100,
 'n_jobs': None,
 'oob_score': False,
 'random_state': 42,
 'verbose': 0,
 'warm_start': False}

--------------------
Performance Metrics:
--------------------
           R2(train)  R2(test)   MAE          SQRT(MSE)
Model 10:  0.444450   0.349708   247.694773   365.848023